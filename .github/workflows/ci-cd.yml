name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: my-web-app
  ECS_SERVICE: my-web-service
  ECS_CLUSTER: my-web-cluster
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  CONTAINER_NAME: my-web-container

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: docker/cache-action@v2
      with:
        path: /tmp/.buildx-cache

    - name: Build Docker image
      run: |
        docker build -t my-app:latest .

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Tag Docker image
      run: |
        docker tag my-app:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

    - name: Fill in the new image ID in the Amazon ECS task definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        aws-region: ${{ env.AWS_REGION }}
